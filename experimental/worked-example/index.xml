<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Worked example: Custom domain (the short way) on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/experimental/worked-example/</link>
    <description>Recent content in Worked example: Custom domain (the short way) on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 16 Jul 2024 21:33:35 +0100</lastBuildDate>
    
	<atom:link href="https://ned14.github.io/outcome/experimental/worked-example/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implicit construction</title>
      <link>https://ned14.github.io/outcome/experimental/worked-example/implicit-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/experimental/worked-example/implicit-construction/</guid>
      <description>The preceding code had the compiler stamp out a custom status code domain for a user supplied enum. You now get the following types:
// This is the status code generated for your custom enum type. It will implicitly construct from // values of enum custom_failure. using custom_failure_code = SYSTEM_ERROR2_NAMESPACE::quick_status_code_from_enum_code&amp;lt;custom_failure&amp;gt;; namespace outcome_e = OUTCOME_V2_NAMESPACE::experimental; // You don&amp;#39;t usually need to use the status code type explicitly, because this &amp;#34;just works&amp;#34;: outcome_e::status_result&amp;lt;int&amp;gt; positive_only(int x) { if(x &amp;lt; 0) { // Outcome&amp;#39;s result sees that status_code will implicitly construct from this enum,  // and it returns an errored result  return custom_failure::bad_argument; } return x; } // Semantic comparisons work bool test(int x) { if(auto r = positive_only(x); !</description>
    </item>
    
  </channel>
</rss>