<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/tags/rust/</link>
    <description>Recent content in Rust on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ned14.github.io/outcome/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust FFI</title>
      <link>https://ned14.github.io/outcome/recipes/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/recipes/rust/</guid>
      <description>A nice side effect of Outcome.Experimental&amp;rsquo;s excellent C support is that teaching Rust about Outcome&amp;rsquo;s result&amp;lt;T&amp;gt; becomes trivially easy. C and C++ results propagate losslessly into Rust Results, and the full power of the Outcome C API is available to Rust code for semantic equivalence comparison et al.
Here&amp;rsquo;s a quick snippet to get you started. This assumes that you have declared your C result using CXX_DECLARE_RESULT_SYSTEM(outcome, intptr_t) in order to produce a C result named &amp;ldquo;outcome&amp;rdquo; compatible with an erased system code C++ result:</description>
    </item>
    
  </channel>
</rss>